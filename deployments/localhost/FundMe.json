{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xfcbda839ac6ce1fd6b7b82a3d216331e285226dd98f2bbe3ce8c474243148f9f",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1015316",
        "logsBloom": "0x
        "blockHash": "0xa1b5f7c2ae2bd29c7c39aaef77ab1dfb3ef41966e84976e903f320193105be87",
        "transactionHash": "0xfcbda839ac6ce1fd6b7b82a3d216331e285226dd98f2bbe3ce8c474243148f9f",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1015316",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "96dd6d055070da891ab45aaf6092532f",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Kush Patel\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds our contract\"}},\"notice\":\"This contract is a to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n *   @author Kush Patel\\n *   @notice This contract is a to demo a sample funding contract\\n *   @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     *   @notice This function funds our contract\\n     *   @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x509f2f966e316c6a9d9ebd8786a3ce1e35785d337f11be8e4bfc827f922bdf16\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\\n    // need ABI \\n    // address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e \\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n    (, int price,,,) = priceFeed.latestRoundData(); // price = price of ETH in USD\\n    return uint256(price * 1e10); // price has 8 decimal places and need to add 10 more to get 18 to match fund function \\n    }\\n\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256){\\n        uint256 ethPrice = getPrice(priceFeed);\\n        return (ethPrice * ethAmount) / 1e18;\\n    }\\n}\",\"keccak256\":\"0x1472d58ddb6d55450d014d831912ddd9bb73c7b3e6325276dab0b6b56b92bada\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200127f3803806200127f833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111006200017f600039600081816101fd0152818161044c01526105c401526111006000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101765761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a8e565b6101b3565b6040516100b49190610ad4565b60405180910390f35b3480156100c957600080fd5b506100d26101fb565b005b3480156100e057600080fd5b506100e961043b565b6040516100f69190610ad4565b60405180910390f35b34801561010b57600080fd5b50610114610448565b6040516101219190610afe565b60405180910390f35b34801561013657600080fd5b5061013f610470565b60405161014c9190610b78565b60405180910390f35b61015d61049a565b005b34801561016b57600080fd5b506101746105c2565b005b34801561018257600080fd5b5061019d60048036038101906101989190610bbf565b610866565b6040516101aa9190610afe565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610280576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561032b576000600182815481106102a6576102a5610bec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032390610c4a565b915050610283565b50600067ffffffffffffffff81111561034757610346610c93565b5b6040519080825280602002602001820160405280156103755781602001602082028036833780820191505090505b506001908051906020019061038b929190610984565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b290610cf3565b60006040518083038185875af1925050503d80600081146103ef576040519150601f19603f3d011682016040523d82523d6000602084013e6103f4565b606091505b5050905080610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610d65565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104d9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ae90919063ffffffff16565b101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190610dd1565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610647576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610681575b5050505050905060005b81518110156107555760008282815181106106f3576106f2610bec565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074d90610c4a565b9150506106d5565b50600067ffffffffffffffff81111561077157610770610c93565b5b60405190808252806020026020018201604052801561079f5781602001602082028036833780820191505090505b50600190805190602001906107b5929190610984565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107dc90610cf3565b60006040518083038185875af1925050503d8060008114610819576040519150601f19603f3d011682016040523d82523d6000602084013e61081e565b606091505b5050905080610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990610d65565b60405180910390fd5b5050565b60006001828154811061087c5761087b610bec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ba836108e4565b9050670de0b6b3a764000084826108d19190610df1565b6108db9190610e7a565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109659190610f38565b5050509150506402540be4008161097c9190610fb3565b915050919050565b8280548282559060005260206000209081019282156109fd579160200282015b828111156109fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109a4565b5b509050610a0a9190610a0e565b5090565b5b80821115610a27576000816000905550600101610a0f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5b82610a30565b9050919050565b610a6b81610a50565b8114610a7657600080fd5b50565b600081359050610a8881610a62565b92915050565b600060208284031215610aa457610aa3610a2b565b5b6000610ab284828501610a79565b91505092915050565b6000819050919050565b610ace81610abb565b82525050565b6000602082019050610ae96000830184610ac5565b92915050565b610af881610a50565b82525050565b6000602082019050610b136000830184610aef565b92915050565b6000819050919050565b6000610b3e610b39610b3484610a30565b610b19565b610a30565b9050919050565b6000610b5082610b23565b9050919050565b6000610b6282610b45565b9050919050565b610b7281610b57565b82525050565b6000602082019050610b8d6000830184610b69565b92915050565b610b9c81610abb565b8114610ba757600080fd5b50565b600081359050610bb981610b93565b92915050565b600060208284031215610bd557610bd4610a2b565b5b6000610be384828501610baa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5582610abb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8857610c87610c1b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cdd600083610cc2565b9150610ce882610ccd565b600082019050919050565b6000610cfe82610cd0565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d4f600b83610d08565b9150610d5a82610d19565b602082019050919050565b60006020820190508181036000830152610d7e81610d42565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dbb601b83610d08565b9150610dc682610d85565b602082019050919050565b60006020820190508181036000830152610dea81610dae565b9050919050565b6000610dfc82610abb565b9150610e0783610abb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4057610e3f610c1b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8582610abb565b9150610e9083610abb565b925082610ea057610e9f610e4b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eca81610eab565b8114610ed557600080fd5b50565b600081519050610ee781610ec1565b92915050565b6000819050919050565b610f0081610eed565b8114610f0b57600080fd5b50565b600081519050610f1d81610ef7565b92915050565b600081519050610f3281610b93565b92915050565b600080600080600060a08688031215610f5457610f53610a2b565b5b6000610f6288828901610ed8565b9550506020610f7388828901610f0e565b9450506040610f8488828901610f23565b9350506060610f9588828901610f23565b9250506080610fa688828901610ed8565b9150509295509295909350565b6000610fbe82610eed565b9150610fc983610eed565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100857611007610c1b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561104557611044610c1b565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108257611081610c1b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110bf576110be610c1b565b5b82820290509291505056fea2646970667358221220aeac3c421e40e456fa4cbbed4b4d8e888800e8645cf5a76e5ba501f7f38e9fc464736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101765761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a8e565b6101b3565b6040516100b49190610ad4565b60405180910390f35b3480156100c957600080fd5b506100d26101fb565b005b3480156100e057600080fd5b506100e961043b565b6040516100f69190610ad4565b60405180910390f35b34801561010b57600080fd5b50610114610448565b6040516101219190610afe565b60405180910390f35b34801561013657600080fd5b5061013f610470565b60405161014c9190610b78565b60405180910390f35b61015d61049a565b005b34801561016b57600080fd5b506101746105c2565b005b34801561018257600080fd5b5061019d60048036038101906101989190610bbf565b610866565b6040516101aa9190610afe565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610280576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561032b576000600182815481106102a6576102a5610bec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032390610c4a565b915050610283565b50600067ffffffffffffffff81111561034757610346610c93565b5b6040519080825280602002602001820160405280156103755781602001602082028036833780820191505090505b506001908051906020019061038b929190610984565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b290610cf3565b60006040518083038185875af1925050503d80600081146103ef576040519150601f19603f3d011682016040523d82523d6000602084013e6103f4565b606091505b5050905080610438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042f90610d65565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104d9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108ae90919063ffffffff16565b101561051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051190610dd1565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610647576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610681575b5050505050905060005b81518110156107555760008282815181106106f3576106f2610bec565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074d90610c4a565b9150506106d5565b50600067ffffffffffffffff81111561077157610770610c93565b5b60405190808252806020026020018201604052801561079f5781602001602082028036833780820191505090505b50600190805190602001906107b5929190610984565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107dc90610cf3565b60006040518083038185875af1925050503d8060008114610819576040519150601f19603f3d011682016040523d82523d6000602084013e61081e565b606091505b5050905080610862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085990610d65565b60405180910390fd5b5050565b60006001828154811061087c5761087b610bec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ba836108e4565b9050670de0b6b3a764000084826108d19190610df1565b6108db9190610e7a565b91505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092d57600080fd5b505afa158015610941573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109659190610f38565b5050509150506402540be4008161097c9190610fb3565b915050919050565b8280548282559060005260206000209081019282156109fd579160200282015b828111156109fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109a4565b5b509050610a0a9190610a0e565b5090565b5b80821115610a27576000816000905550600101610a0f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5b82610a30565b9050919050565b610a6b81610a50565b8114610a7657600080fd5b50565b600081359050610a8881610a62565b92915050565b600060208284031215610aa457610aa3610a2b565b5b6000610ab284828501610a79565b91505092915050565b6000819050919050565b610ace81610abb565b82525050565b6000602082019050610ae96000830184610ac5565b92915050565b610af881610a50565b82525050565b6000602082019050610b136000830184610aef565b92915050565b6000819050919050565b6000610b3e610b39610b3484610a30565b610b19565b610a30565b9050919050565b6000610b5082610b23565b9050919050565b6000610b6282610b45565b9050919050565b610b7281610b57565b82525050565b6000602082019050610b8d6000830184610b69565b92915050565b610b9c81610abb565b8114610ba757600080fd5b50565b600081359050610bb981610b93565b92915050565b600060208284031215610bd557610bd4610a2b565b5b6000610be384828501610baa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5582610abb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c8857610c87610c1b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cdd600083610cc2565b9150610ce882610ccd565b600082019050919050565b6000610cfe82610cd0565b9150819050919050565b600082825260208201905092915050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d4f600b83610d08565b9150610d5a82610d19565b602082019050919050565b60006020820190508181036000830152610d7e81610d42565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610dbb601b83610d08565b9150610dc682610d85565b602082019050919050565b60006020820190508181036000830152610dea81610dae565b9050919050565b6000610dfc82610abb565b9150610e0783610abb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4057610e3f610c1b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e8582610abb565b9150610e9083610abb565b925082610ea057610e9f610e4b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610eca81610eab565b8114610ed557600080fd5b50565b600081519050610ee781610ec1565b92915050565b6000819050919050565b610f0081610eed565b8114610f0b57600080fd5b50565b600081519050610f1d81610ef7565b92915050565b600081519050610f3281610b93565b92915050565b600080600080600060a08688031215610f5457610f53610a2b565b5b6000610f6288828901610ed8565b9550506020610f7388828901610f0e565b9450506040610f8488828901610f23565b9350506060610f9588828901610f23565b9250506080610fa688828901610ed8565b9150509295509295909350565b6000610fbe82610eed565b9150610fc983610eed565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561100857611007610c1b565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561104557611044610c1b565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561108257611081610c1b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110bf576110be610c1b565b5b82820290509291505056fea2646970667358221220aeac3c421e40e456fa4cbbed4b4d8e888800e8645cf5a76e5ba501f7f38e9fc464736f6c63430008080033",
    "devdoc": {
        "author": "Kush Patel",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds our contract"
            }
        },
        "notice": "This contract is a to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 58,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 61,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
